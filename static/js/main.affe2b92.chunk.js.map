{"version":3,"sources":["reducer.js","Context.js","useInterval.js","components/TopNav.js","components/Button.js","components/Slider.js","components/DetailsPanel.js","components/SideNav.js","components/DisplayBox.js","components/SortingVisualizer.js","App.js","index.js"],"names":["randomArr","size","arr","Array","fill","map","a","b","Math","floor","random","numberBoxesFromNumbers","numbers","height","margin","number","index","value","isOut","style","width","position","top","left","transitionOff","numboxRefs","document","querySelectorAll","classList","toggle","transitionOn","resetStack","selected","scope","instructions","p","getIndexShifted","numberBoxes","shiftAmt","numberBox","n","parseFloat","round","indexShifted","length","forEach","shift","newElem","reducer","state","action","newStack","algorithm","insertionIdx","currentIdx","type","stack","selection_sort_reducer","newNumBoxes","slice","k","j","key","newTop","boxHeight","boxMargin","insertion_sort_reducer","bubble_sort_reducer","mid","right","mergeOrder","next","idx","mergeIdx","unit","undefined","i","numbersFromNumberBoxes","compared","merging","push","getMergeOrder","unshift","merge_sort_reducer","partitionOrder","nextSwap","console","log","temp","pivot","getPartitionOrder","partitionIdx","quick_sort_reducer","Number","reserve","isRunning","speed","selection","colorMode","pop","StateContext","createContext","StateContextProvider","props","useReducer","initialState","dispatch","contextValue","useMemo","Provider","children","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","TopNav","handler","useState","visible","setVisible","useContext","handleSelectionClick","useCallback","event","handleSelectionChange","target","links","link","addEventListener","removeEventListener","newSelection","className","onClick","settingsBtn","querySelector","prev","flex","mode","Button","Slider","min","max","step","onChange","e","DetailsPanel","detailText","getDetailText","minElementStyle","background","color","unsortedElementStyle","sortedElementStyle","setStyleRule","selector","rule","sheetName","sheets","styleSheets","stylesheet","href","indexOf","addRule","insertRule","cssRules","SideNav","setDetailText","onRandom","onReset","onStep","onRun","newSpeed","handleSpeedChange","green","getColor","DisplayBox","display","initialDisplayHeight","clientHeight","boxComponents","ref","SortingVisualizer","sorter","stepSelectionSort","stepInsertionSort","stepBubbleSort","stepMergeSort","stepQuickSort","insertionIndex","currentIndex","minIndex","swap","insert","compare","swapped","instruction","l","r","splice","requestAnimationFrame","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.affe2b92.chunk.js","sourcesContent":["function randomBetween(a, b) {\n    return Math.floor(Math.random() * (b - a)) + a;\n}\n\nexport function randomArr(size) {\n    let arr = Array(size).fill(1);\n    arr = arr.map(() => (randomBetween(10, 500)));\n    return arr;\n}\n\nfunction getSortedOrder(initialOrder) {\n    let indices = Array(initialOrder.length).fill(0).map((z, i) => i);\n    let sortedIndices = indices.sort((a, b) => {\n        if(initialOrder[a] < initialOrder[b]) {\n            return -1;\n        } else if(initialOrder[a] > initialOrder[b]) {\n            return 1;\n        }\n        return 0;\n    });\n    return sortedIndices;\n}\n\n// Modified version of code found here:\n// https://codepen.io/mradamcole/pen/yWXyPz\nfunction getRainbow(size) {\n    let colors = [];\n\n    const rainbowStop = h => {\n        const f = (n, k = (n + h * 12) % 12) => .5 - .5 * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n        const rgb2hex = (r, g, b) => \"#\" + [r, g, b].map(x => Math.round(x * 255).toString(16).padStart(2, 0)).join('');\n        return (rgb2hex(f(0), f(8), f(4)));\n    }\n\n    for (let i = 0; i < size; i++) {\n        let c = i / size;\n        colors.push(rainbowStop(c));\n    }\n    return colors;\n}\n\nexport function numberBoxesFromNumbers(numbers, height, margin) {\n    const numberBoxes = numbers.map((number, index) => {\n        return {\n            value: number,\n            isOut: false,\n            style: {\n                width: `${number}px`,\n                height: `${height}px`,\n                margin: `${margin}px 0 0 0`,\n                position: 'relative',\n                top: 0,\n                left: 0,\n            }\n        }\n    });\n    return numberBoxes;\n}\n\nfunction numbersFromNumberBoxes(numberBoxes) {\n    const numbers = numberBoxes.map(numberBox => (numberBox.value));\n    return numbers;\n}\n\n// Removes the 'transitionable' class on the 'numberBoxes'\nfunction transitionOff() {\n    let numboxRefs = document.querySelectorAll(\".number-box\");\n    for (let numbox of numboxRefs) {\n        numbox.classList.toggle('transitionable', false);\n    }\n}\n\n\n// Adds the 'transitionable' class on the 'numberBoxes'\nfunction transitionOn() {\n    let numboxRefs = document.querySelectorAll(\".number-box\");\n    for (let numbox of numboxRefs) {\n        numbox.classList.toggle('transitionable', true);\n    }\n}\n\nfunction resetStack(selected, size) {\n    switch (selected) {\n        case 1:\n            return [0, 0, 0];\n        case 2:\n            return [1, 1, 0];\n        case 3:\n            return [0, size, 0];\n        case 4:\n            return [{ scope: [0, size - 1], instructions: ['recurse-l', 'recurse-r', 'merge', 'return'] }]\n        case 5:\n            return [{ scope: [0, size - 1], instructions: ['partition', 'recurse-l', 'recurse-r', 'return'], p: null }]\n        default:\n            return null;\n    }\n}\n\nfunction getMergeOrder(numbers, left, mid, right) {\n    let mergeOrder = [];\n    let i = left, j = mid + 1;\n    let merging = true;\n\n    while (merging) {\n        if (numbers[i] < numbers[j]) {\n            mergeOrder.push(i++);\n        } else {\n            mergeOrder.push(j++);\n        }\n        if (i === mid + 1) {\n            mergeOrder.push(j);\n            merging = false;\n        }\n        if (j === right + 1) {\n            mergeOrder.push(i);\n            merging = false;\n        }\n    }\n    return mergeOrder;\n}\n\nfunction getPartitionOrder(numbers, left, right) {\n    let partitionOrder = [];\n    let pivot = numbers[right];\n    let i = left - 1;\n\n    for (let j = left; j < right; j++) {\n        if (numbers[j] < pivot) {\n            i++;\n            partitionOrder.push([i, j]);\n        }\n    }\n    partitionOrder.push([i + 1, right]);\n    return partitionOrder;\n}\n\nfunction getIndexShifted(numberBoxes, height, margin) {\n    // Calculate the index shift amount for each numberBox\n    let shiftAmt = numberBoxes.map((numberBox) => {\n        let n = parseFloat(numberBox.style.top)\n        n /= (margin + height);\n        n = Math.round(n);\n        return n;\n    });\n    // Populate a new array based on previous array and shift amount array\n    let indexShifted = Array(numberBoxes.length);\n    shiftAmt.forEach((shift, index) => {\n        let newElem = numberBoxes[index];\n        newElem.style = {\n            ...newElem.style,\n            top: 0,\n        };\n        indexShifted[index + shift] = newElem;\n    });\n    return indexShifted;\n}\n\nfunction selection_sort_reducer(state, action) {\n    let insertionIdx, currentIdx, minIdx;\n\n    switch (action.type) {\n        case 'inc-insertion':\n            [insertionIdx] = state.stack;\n            return {\n                ...state,\n                stack: [insertionIdx + 1, insertionIdx + 1, insertionIdx + 1],\n            }\n        case 'set-min':\n            [insertionIdx, currentIdx] = state.stack;\n            return {\n                ...state,\n                stack: [insertionIdx, currentIdx + 1, currentIdx],\n            }\n        case 'inc-current':\n            [insertionIdx, currentIdx, minIdx] = state.stack;\n            return {\n                ...state,\n                stack: [insertionIdx, currentIdx + 1, minIdx],\n            }\n        default:\n            return state;\n    }\n}\n\nfunction insertion_sort_reducer(state, action) {\n    let newNumBoxes = state.numberBoxes.slice();\n    let newStack = state.stack.slice();\n    let [, k, j] = newStack;\n    let indexShifted;\n\n    transitionOn();\n\n    switch (action.type) {\n        case 'move-key-out':\n            newNumBoxes[action.key].style = {\n                ...newNumBoxes[action.key].style,\n                left: '600px'\n            };\n            newNumBoxes[action.key].isOut = true;\n            return {\n                ...state,\n                numberBoxes: newNumBoxes,\n            }\n        case 'move-key-up':\n            const oldTop = parseFloat(newNumBoxes[action.key].style.top);\n            let newTop = oldTop - (state.boxHeight + state.boxMargin);\n            newNumBoxes[j].style = {\n                ...newNumBoxes[j].style,\n                top: `${state.boxHeight + state.boxMargin}px`\n            }\n            newNumBoxes[action.key].style = {\n                ...newNumBoxes[action.key].style,\n                top: `${newTop}px`\n            };\n            newStack[2] -= 1; // j--\n            return {\n                ...state,\n                numberBoxes: newNumBoxes,\n                stack: newStack,\n            }\n        case 'move-key-in':\n            newNumBoxes[action.key].isOut = false;\n            newNumBoxes[action.key].style = {\n                ...newNumBoxes[action.key].style,\n                left: 0\n            };\n            return {\n                ...state,\n                numberBoxes: newNumBoxes,\n            }\n        case 'set-state':\n            indexShifted = getIndexShifted(newNumBoxes, state.boxHeight, state.boxMargin);\n            transitionOff();\n            return {\n                ...state,\n                numberBoxes: indexShifted,\n                stack: [k + 1, k + 1, k]\n            }\n        default:\n            return state;\n    }\n}\n\nfunction bubble_sort_reducer(state, action) {\n    let [i, j, swapped] = state.stack;\n    switch (action.type) {\n        case 'reset':\n            [i, j, swapped] = state.stack;\n            return {\n                ...state,\n                stack: [0, j - 1, 0],\n            }\n        case 'set-swapped':\n            [i, j] = state.stack;\n            return {\n                ...state,\n                stack: [i + 1, j, 1],\n            }\n        case 'inc-counter':\n            [i, j, swapped] = state.stack;\n            return {\n                ...state,\n                stack: [i + 1, j, swapped],\n            }\n        default:\n            return state;\n    }\n}\n\nfunction merge_sort_reducer(state, action) {\n    let numbers, newStack, numberBoxes;\n    transitionOn();\n\n    switch (action.type) {\n        case 'recurse-l':\n            return {\n                ...state,\n                stack: [...state.stack, { scope: [action.left, action.mid], instructions: ['recurse-l', 'recurse-r', 'merge', 'return'] }]\n            }\n        case 'recurse-r':\n            return {\n                ...state,\n                stack: [...state.stack, { scope: [action.mid + 1, action.right], instructions: ['recurse-l', 'recurse-r', 'merge', 'return'] }]\n            }\n        case 'merge':\n            numbers = state.numbers.slice();\n            numberBoxes = state.numberBoxes.slice();\n            newStack = state.stack.slice();\n            // When we first enter the merge step, move all the boxes in the current 'scope' out of position\n            if (!newStack[0].mergeOrder) {       // Use the bottom of the stack to store merge order\n                // Move each numberBox within the current 'scope' to the right\n                for (let index in state.numbers) {\n                    if (index >= state.stack[state.stack.length - 1].scope[0] && index <= state.stack[state.stack.length - 1].scope[1]) {\n                        numberBoxes[index].style = {\n                            ...numberBoxes[index].style,\n                            left: '600px'\n                        };\n                        numberBoxes[index].isOut = true;\n                    }\n                }\n                // Calculate the order in which to merge and place an object containing this order at the bottom of the stack\n                let mergeOrder = getMergeOrder(numbers, action.left, action.mid, action.right);\n                newStack.unshift({ mergeOrder: mergeOrder, mergeIdx: action.left, compared: [action.left, action.mid + 1] });\n            } else {    // As long as the object with property 'mergeOrder' is at the bottom, merge the next element\n                let next = newStack[0].mergeOrder.shift();          // Index of next element to be merged into original array\n                let idx = newStack[0].mergeIdx;                     // Index where the merged element will be placed\n                const unit = state.boxHeight + state.boxMargin;\n\n                if (next === undefined) {    // We are either finished with this merge step or the rest is already sorted\n                    // If the rest of the numbers out of place are already sorted, move them into correct position\n                    // If there are any out do move else do index shift\n                    if (idx <= action.right) {\n                        for (let i = 0; i < numberBoxes.length; i++) {\n                            let numberBox = numberBoxes[i];\n                            if (numberBox.isOut) {\n                                numberBox.style = {\n                                    ...numberBox.style,\n                                    top: `${(idx - i) * unit}px`,\n                                    left: 0,\n                                }\n                                numberBox.isOut = false;\n                                idx++;\n                            }\n                        }\n                    }\n                    // Remove object with property 'mergeOrder' from the bottom of stack\n                    newStack.shift();\n                    // Remove merge instruction from current 'scope'\n                    newStack[newStack.length - 1].instructions.shift();\n\n                    let indexShifted = getIndexShifted(numberBoxes, state.boxHeight, state.boxMargin)\n                    // Set the numberBoxes and numbers to be in the new order\n                    numberBoxes = indexShifted;\n                    numbers = numbersFromNumberBoxes(numberBoxes);\n\n                    transitionOff();\n                } else { // Move number box to correct position\n                    let displacement = idx - next;\n                    const newTop = `${displacement * unit}px`;\n\n                    numberBoxes[next].style = {\n                        ...numberBoxes[next].style,\n                        top: newTop,\n                        left: 0,\n                    }\n                    numberBoxes[next].isOut = false;\n                    // Increment the index that the merged element will be inserted into\n                    newStack[0].mergeIdx += 1;\n                    // Increment which elements are being compared\n                    (next <= action.mid) ? newStack[0].compared[0]++ : newStack[0].compared[1]++;\n                }\n            }\n            return {\n                ...state,\n                numbers: numbers,\n                numberBoxes: numberBoxes,\n                stack: newStack,\n            }\n        default:\n            return state;\n    }\n}\n\nfunction quick_sort_reducer(state, action) {\n    let newStack, numbers, numberBoxes;\n    switch (action.type) {\n        case 'partition':\n            newStack = state.stack.slice();\n            numbers = state.numbers.slice();\n            numberBoxes = state.numberBoxes.slice();\n\n            if (!newStack[0].partitionOrder) {\n                let partitionOrder = getPartitionOrder(state.numbers, action.left, action.right);\n                let partitionIdx = partitionOrder[partitionOrder.length - 1][0];\n                newStack.unshift({ partitionOrder: partitionOrder, partitionIdx: partitionIdx })\n                newStack[newStack.length - 1].p = partitionIdx;\n            } else {\n                let nextSwap = newStack[0].partitionOrder.shift();\n                console.log(nextSwap);\n                if (nextSwap === undefined) {\n                    newStack[newStack.length - 1].instructions.shift();\n                    newStack.shift();\n                } else {\n                    // Swap\n                    let temp = numbers[nextSwap[0]];\n                    numbers[nextSwap[0]] = numbers[nextSwap[1]];\n                    numbers[nextSwap[1]] = temp;\n                    numberBoxes = numberBoxesFromNumbers(numbers, state.boxHeight, state.boxMargin);\n                }\n\n            }\n            return {\n                ...state,\n                numbers: numbers,\n                numberBoxes: numberBoxes,\n                stack: newStack,\n            }\n        case 'recurse-l':\n            return {\n                ...state,\n                stack: [...state.stack, { scope: [action.left, action.p - 1], instructions: ['partition', 'recurse-l', 'recurse-r', 'return'], p: null }]\n            }\n        case 'recurse-r':\n            return {\n                ...state,\n                stack: [...state.stack, { scope: [action.p + 1, action.right], instructions: ['partition', 'recurse-l', 'recurse-r', 'return'], p: null }]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default function reducer(state, action) {\n    let numbers, numberBoxes, colorBoxes, newStack, returnTo;\n\n    switch (action.algorithm) {\n        case 'selection-sort':\n            return selection_sort_reducer(state, action);\n        case 'insertion-sort':\n            return insertion_sort_reducer(state, action);\n        case 'bubble-sort':\n            return bubble_sort_reducer(state, action);\n        case 'merge-sort':\n            return merge_sort_reducer(state, action);\n        case 'quick-sort':\n            return quick_sort_reducer(state, action);\n        default:\n            switch (action.type) {\n                case 'size-change':\n                    numbers = randomArr(Number(action.size));\n                    numberBoxes = numberBoxesFromNumbers(numbers, state.boxHeight, state.boxMargin);\n                    return {\n                        ...state,\n                        size: Number(action.size),\n                        numbers: numbers,\n                        reserve: numbers,\n                        numberBoxes: numberBoxes,\n                        stack: resetStack(state.selected, Number(action.size)),\n                        isRunning: false,\n                    };\n                case 'speed-change':\n                    return { ...state, speed: Number(action.speed) };\n                case 'selection-change':\n                    numbers = state.reserve;\n                    numberBoxes = numberBoxesFromNumbers(numbers, state.boxHeight, state.boxMargin);\n                    return {\n                        ...state,\n                        selected: Number(action.selection),\n                        numbers: numbers,\n                        numberBoxes: numberBoxes,\n                        isRunning: false,\n                        stack: resetStack(Number(action.selection), state.size)\n                    };\n                case 'change-box-size':\n                    numberBoxes = numberBoxesFromNumbers(state.numbers, action.height, action.margin)\n                    return {\n                        ...state,\n                        boxHeight: action.height,\n                        boxMargin: action.margin,\n                        numberBoxes: numberBoxes,\n                    }\n                case 'random':\n                    numbers = randomArr(state.size);\n                    numberBoxes = numberBoxesFromNumbers(numbers, state.boxHeight, state.boxMargin);\n                    return {\n                        ...state,\n                        stack: resetStack(state.selected, state.size),\n                        isRunning: false,\n                        numbers: numbers,\n                        reserve: numbers,\n                        numberBoxes: numberBoxes\n                    };\n                case 'reset':\n                    numberBoxes = numberBoxesFromNumbers(state.reserve, state.boxHeight, state.boxMargin);\n                    return {\n                        ...state,\n                        stack: resetStack(state.selected, state.size),\n                        isRunning: false,\n                        numbers: state.reserve,\n                        numberBoxes: numberBoxes\n                    };\n                case 'toggle-run':\n                    return { ...state, isRunning: !state.isRunning };\n                case 'finish':\n                    return { ...state, stack: [state.size, 0, state.size] }\n                case 'change-mode':\n                    numbers = state.reserve;\n\n                    return {\n                        ...state,\n                        numbers: numbers,\n                        colorMode: !state.colorMode,\n                    }\n                case 'swap':\n                    numbers = state.numbers.slice();\n                    let temp = numbers[action.a];\n                    numbers[action.a] = numbers[action.b];\n                    numbers[action.b] = temp;\n                    numberBoxes = numberBoxesFromNumbers(numbers, state.boxHeight, state.boxMargin);\n                    return { ...state, numbers: numbers, numberBoxes: numberBoxes };\n                case 'recursive-return':\n                    newStack = state.stack.slice();\n                    newStack.pop();\n                    returnTo = newStack[newStack.length - 1];\n                    returnTo.instructions.shift();\n                    return {\n                        ...state,\n                        stack: newStack,\n                    }\n                default:\n                    return state;\n            }\n    }\n}","import React, { useReducer, useMemo, createContext } from 'react'\nimport reducer, { randomArr, numberBoxesFromNumbers } from './reducer'\n\nexport const StateContext = createContext();\n\nfunction initialState() {\n    const size = 6;\n    const numbers = randomArr(size);\n    const boxHeight = 75;\n    const boxMargin = 15;\n    const numberBoxes = numberBoxesFromNumbers(numbers);\n    \n    return {\n        size: size,\n        numbers: numbers,\n        reserve: numbers,\n        boxHeight: boxHeight,\n        boxMargin: boxMargin,\n        selected: 0,\n        isRunning: false,\n        speed: 90, \n        numberBoxes: numberBoxes,\n        stack: null,\n    }\n}\n\nexport const StateContextProvider = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState());\n    const contextValue = useMemo(() => ({ state, dispatch }), [state, dispatch]);\n\n\n    return (\n        <StateContext.Provider value={contextValue}>\n            {props.children}\n        </StateContext.Provider>\n    );\n}\n\n\n","import { useEffect, useRef } from 'react'\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current && savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport default useInterval;","import React, { useState, useContext, useEffect, useCallback, useRef } from 'react'\n\nimport './styles/TopNav.css'\nimport { StateContext } from '../Context';\n\nfunction useClickListener(handler) {\n    useEffect(() => {\n        let links = document.querySelectorAll('.nav-links li');\n        links.forEach(link => {\n            link.addEventListener('click', handler);\n        });\n        return () => {\n            links.forEach(link => {\n                link.removeEventListener('click', handler);\n            });\n        }\n    }, [handler]);\n}\n\nfunction TopNav() {\n    const [visible, setVisible] = useState(false);\n    const { dispatch } = useContext(StateContext);\n\n    // Uses callback hook so that reference never changes\n    const handleSelectionClick = useCallback((event) => {\n        handleSelectionChange(event.target.value);\n    }, []);\n    // Adds click listeners to nav links only once since handler never changes\n    useClickListener(handleSelectionClick);\n\n    // Toggles visibility of settings panel\n    const handleSettingsClick = () => {\n        const settingsBtn = document.querySelector('.top-nav .settings');\n        setVisible(prev => {\n            if (prev === true) settingsBtn.style.flex = '1';\n            else settingsBtn.style.flex = '2';\n            return !prev;\n        });\n    }\n\n    const handleColorModeClick = () => {\n        dispatch({ type: 'change-mode', mode: 'color' })\n    }\n\n    // Changes the selected algorithm\n    const handleSelectionChange = (newSelection) => {\n        dispatch({ type: 'selection-change', selection: newSelection });\n        setActive(newSelection);\n    }\n\n    // Sets the selected algorithms' nav link to active\n    function setActive(selection) {\n        let links = document.querySelectorAll('.nav-links li');\n        links.forEach((link, index) => {\n            if (index + 1 === selection) {\n                link.classList.toggle('active', true);\n            } else {\n                link.classList.toggle('active', false);\n            }\n        });\n    }\n\n    return (\n        <div className=\"top-nav\">\n            <h1>Sorting Visualizer</h1>\n            <div className=\"vertical-line\" />\n\n            <div className=\"nav-links-container\">\n                <ul className=\"nav-links\">\n                    <li value='1'>Selection sort</li>\n                    <li value='2'>Insertion sort</li>\n                    <li value='3'>Bubble sort</li>\n                    <li value='4'>Merge sort</li>\n                    <li value='5'>Quick sort</li>\n                </ul>\n            </div>\n\n            <div className=\"vertical-line\" />\n            <div className='settings'>\n                <div className=\"settings-logo\" onClick={handleSettingsClick}>{\"\\u2699\"}</div>\n                <div className=\"settings-container\">\n                    <div className={\"settings-content \" + (visible ? 'visible' : 'hidden')}>\n                        <input type=\"checkbox\" onClick={handleColorModeClick}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TopNav","import React from 'react'\nimport './styles/Button.css'\n\nfunction Button(props) {\n    return (\n        <div className=\"button\" onClick={props.onClick}>{props.children}</div>\n    )\n}\n\nexport default Button","import React from 'react' \nimport './styles/Slider.css'\n\nconst Slider = (props) => {\n    return(\n        <div className=\"slider-container\">\n            <div>{props.children}</div>\n            <input \n                type=\"range\" \n                min={props.min} \n                max={props.max} \n                step={props.step}\n                value={props.value} \n                className=\"slider\" \n                id=\"myRange\" \n                onChange={(e) => {\n                    props.onChange(e.target.value);\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Slider","import React from 'react';\n\nconst DetailsPanel = (props) => {\n\n    return (\n        <div className='instructions'>\n            <p>\n                {props.detailText}\n            </p>\n        </div>\n    );\n}\n\nexport default DetailsPanel;","import React, { useContext, useState, useEffect } from 'react'\nimport { StateContext } from '../Context'\n\nimport './styles/SideNav.css'\nimport Button from './Button'\nimport Slider from './Slider'\nimport DetailsPanel from './DetailsPanel'\n\nfunction getDetailText(selection) {\n    let minElementStyle = {\n        background: 'lightgreen',\n        color: 'black',\n    }\n    const unsortedElementStyle = {\n        background: 'grey',\n        color: 'black',\n    }\n    const sortedElementStyle = {\n        background: 'rgb(60, 150, 60)',\n        color: 'black',\n    }\n\n    switch(selection) {\n        case 1:\n            return (\n                <span className='description-text'>\n                    The selection sort algorithm sorts an array by repeatedly finding the <span style={minElementStyle}>minimum element</span> (considering ascending order) \n                     from the <span style={unsortedElementStyle}>unsorted subarray</span> and putting it in its final sorted position.\n                     In every iteration of selection sort, the <span style={minElementStyle}>minimum element</span> from the <span style={unsortedElementStyle}>unsorted subarray</span> is picked and at the end of the iteration it is swapped with the first element of the <span style={unsortedElementStyle}>unsorted subarray</span> and the length of the <span style={sortedElementStyle}>sorted subarray</span> increases by one. \n                </span>\n            );\n        case 2:\n            return (\n                <span className='description-text'>\n                    The insertion sort algorithm sorts an array by repeatedly moving the first element of the <span style={unsortedElementStyle}>unsorted subarray</span> into its correct position within the <span style={sortedElementStyle}>sorted subarray</span>.\n                     In every iteration of insertion sort, the <span style={minElementStyle}>next element</span> of the <span style={unsortedElementStyle}>unsorted subarray</span> is compared with elements from the <span style={sortedElementStyle}>sorted subarray</span> until its position is found and it is inserted into this position.\n                </span>\n            );\n        case 3:\n            return (\n                <span className='description-text'>\n                </span>\n            );\n        case 4:\n            return (\n                <span className='description-text'>\n\n                </span>\n            );\n        case 5:\n            return (\n                <span className='description-text'>\n\n                </span>\n            );\n        default:\n            return (\n                <span className='description-text'>\n                    Select a sorting algorithm. Then, click 'Run' to begin the animation or click 'Step' to step through the animation\n                </span>\n            );\n            \n    }\n\n}\n\n// Got from stack overflow to set a rule of a stylesheet\nconst setStyleRule = function(selector, rule, sheetName=\"SideNav\") {\n    var sheets = document.styleSheets,\n        stylesheet = sheets[(sheets.length - 1)];\n\n    for( var i in document.styleSheets ){\n        if( sheets[i].href && sheets[i].href.indexOf(sheetName + \".css\") > -1 ) {\n            stylesheet = sheets[i];\n            break;\n        }\n    }\n\n    if( stylesheet.addRule) {\n        stylesheet.addRule(selector, rule);\n    }\n\n    else if( stylesheet.insertRule )\n        stylesheet.insertRule(selector + ' { ' + rule + ' }', stylesheet.cssRules.length);\n}\n\nfunction SideNav(props) {\n    const { state, dispatch } = useContext(StateContext)\n    const [detailText, setDetailText] = useState(getDetailText(state.selection));\n\n    useEffect(() => {\n        setDetailText(getDetailText(state.selected));\n    }, [state.selected]);\n\n    function handleSizeChange(newSize) {\n        dispatch({ type: 'size-change', size: newSize });\n    }\n    function handleSpeedChange(newSpeed) {\n        let selector = '.number-box.transitionable';\n        if(newSpeed <= 60) {\n            setStyleRule(selector, 'transition-duration: 0.4s, 0.2s');\n        } else if (newSpeed <= 70) {\n            setStyleRule(selector, 'transition-duration: 0.2s, 0.125s');\n        } else  if (newSpeed <= 80) {\n            setStyleRule(selector, 'transition-duration: 0.05s, 0.025s');\n        } else {\n            setStyleRule(selector, 'transition-duration: 0.025s, 0.0125s');\n        }\n        dispatch({ type: 'speed-change', speed: newSpeed });\n    }\n\n    return (\n        <div className=\"side-nav\">\n            <DetailsPanel detailText={detailText}/>\n            <span className=\"horizontal-line\"></span>\n            <div className=\"controls-panel\">\n                <Button onClick={props.onRandom}>Random</Button>\n                <Button onClick={props.onReset}>Reset</Button>\n                <Button onClick={props.onStep}>Step</Button>\n                <Button onClick={props.onRun}>{state.isRunning ? 'Stop' : 'Run'}</Button>\n                <Slider onChange={(speed) => handleSpeedChange(speed)} min='0' max='100' step='10' value={state.speed}>Animation Speed:</Slider>\n                <Slider onChange={(size) => handleSizeChange(size)} min='5' max='300' step='1' value={state.size}>Array Size:</Slider>\n            </div>\n        </div>\n    );\n}\n\nexport default SideNav","import React, { useContext, useEffect, useRef } from 'react';\nimport { StateContext } from '../Context';\nimport './styles/DisplayBox.css'\n\nconst green = 'rgb(60, 150, 60)';\n\nfunction getColor(index, state) {\n    switch (state.selected) {\n        case 1: // Selection sort\n            if (index < state.stack[0]) return green;\n            if (index === state.stack[1]) return 'rgba(0, 0, 0, 0.3)';\n            if (index === state.stack[2]) return 'lightgreen';\n            return 'grey';\n        case 2: // Insertion sort\n            if (index === state.stack[1]) return 'lightgreen';\n            if (index <= state.stack[1]) return green;\n            if (index === state.stack[2]) return 'rgba(0, 0, 0, 0.3)';\n            return 'grey'\n        case 3: // Bubble sort\n            if (index === state.stack[0] || index === state.stack[0] + 1) return 'rgba(0, 0, 0, 0.3)';\n            if (index >= state.stack[1]) return green;\n            return 'grey';\n        case 4: // Merge sort\n            let current = state.stack[state.stack.length - 1];\n            let mergeOrder = state.stack[0];\n            if (index >= current.scope[0] && index <= current.scope[1]) {\n                if (mergeOrder.mergeOrder && state.numberBoxes[index].isOut && (index === mergeOrder.compared[0] || index === mergeOrder.compared[1])) {\n                    return 'red';\n                }\n                return 'rgba(0, 0, 0, 0.3)';\n            }\n            return 'grey';\n        case 5: // Quick sort\n            if (state.stack[0].partitionOrder && index === state.stack[state.stack.length - 1].p) return green;\n            if (state.stack[0].partitionOrder && state.stack[0].partitionOrder[0]) {\n                if (index === state.stack[0].partitionOrder[0][0] || index === state.stack[0].partitionOrder[0][1]) {\n                    return 'red';\n                }\n                if (index >= state.stack[state.stack.length - 1].scope[0] && index <= state.stack[state.stack.length - 1].scope[1]) {\n                    return 'rgba(0, 0, 0, 0.3)';\n                }\n            }\n            return 'grey';\n        default:\n            return 'transparent';\n    }\n}\n\nconst DisplayBox = (props) => {\n    const { state, dispatch } = useContext(StateContext);\n\n    const display = useRef();\n    const initialDisplayHeight = useRef();\n\n    useEffect(() => {\n        initialDisplayHeight.current = display.current.clientHeight;\n    }, []);\n\n    useEffect(() => {\n        let height, margin;\n        height = (initialDisplayHeight.current - 20) / (state.size);\n        margin = 0.50 * height;\n        height -= margin;\n        margin = (margin < 1) ? 1 : Math.floor(margin);\n        height = (height < 1) ? 1 : Math.floor(height);\n        dispatch({ type: 'change-box-size', height, margin })\n    }, [state.size, dispatch]);\n\n    const boxComponents = state.numberBoxes.map((numberBox, index) => {\n        let style = {\n            ...numberBox.style,\n            background: getColor(index, state),\n        }\n\n        return (\n            <div className=\"number-box transitionable\" key={index} style={style}>{\"\"}</div>\n        );\n    });\n\n    return (\n        <div className='display-box' ref={display}>\n            {boxComponents}\n        </div>\n    );\n};\n\nfunction useDisplayBoxHeight() {\n    \n}\n\nexport default DisplayBox;","import React, { useContext } from 'react'\nimport { StateContext } from '../Context'\n\nimport './styles/SortingVisualizer.css'\nimport useInterval from '../useInterval'\nimport TopNav from '../components/TopNav'\nimport SideNav from '../components/SideNav'\nimport DisplayBox from '../components/DisplayBox'\n\nconst SortingVisualizer = () => {\n    const { state, dispatch } = useContext(StateContext);\n\n    let sorter = (state.selected === 1 && stepSelectionSort) ||\n        (state.selected === 2 && stepInsertionSort) ||\n        (state.selected === 3 && stepBubbleSort) ||\n        (state.selected === 4 && stepMergeSort) ||\n        (state.selected === 5 && stepQuickSort);\n\n    useInterval(sorter, state.isRunning ? (1010 - (state.speed * 10)) : null);\n\n    const handleReset = () => {\n        dispatch({ type: 'reset' });\n    }\n\n    const handleRandom = () => {\n        dispatch({ type: 'random' });\n    }\n\n    const handleStep = () => {\n        state.selected === 1 && requestAnimationFrame(stepSelectionSort);\n        state.selected === 2 && requestAnimationFrame(stepInsertionSort);\n        state.selected === 3 && requestAnimationFrame(stepBubbleSort);\n        state.selected === 4 && requestAnimationFrame(stepMergeSort);\n        state.selected === 5 && requestAnimationFrame(stepQuickSort);\n    }\n\n    const handleRun = () => {\n        dispatch({ type: 'toggle-run' });\n    }\n\n    function stepSelectionSort() {\n        let [insertionIndex, currentIndex, minIndex] = state.stack;\n        if (insertionIndex === state.numbers.length) {\n            dispatch({ type: 'toggle-run' });\n            return;\n        }\n        if (currentIndex === state.numbers.length) {\n            swap(insertionIndex, minIndex);\n            // Increment the insertion index and set the current and min to that index\n            dispatch({ algorithm: 'selection-sort', type: 'inc-insertion' })\n            return;\n        }\n        if (state.numbers[currentIndex] < state.numbers[minIndex]) {\n            dispatch({ algorithm: 'selection-sort', type: 'set-min' })\n            // Set min and increment current\n            return;\n        }\n        // Increment current\n        dispatch({ algorithm: 'selection-sort', type: 'inc-current' })\n    }\n\n    function stepInsertionSort() {\n        // Initialized to [1, 1, 0]\n        let [insert, key, compare] = state.stack;\n        // Insert has passed the end of the number list, done\n        if (insert >= state.numberBoxes.length) {\n            dispatch({ type: 'toggle-run' });\n            return;\n        }\n        // Key goes in the beginning of list\n        if (compare < 0) {\n            (state.numberBoxes[key].isOut) ? \n                dispatch({ algorithm: 'insertion-sort', type: 'move-key-in', key: key }) :\n                dispatch({ algorithm: 'insertion-sort', type: 'set-state' });\n            return;\n        }\n\n        if (state.numberBoxes[insert].value < state.numberBoxes[compare].value) {\n            (state.numberBoxes[key].isOut) ?\n                dispatch({ algorithm: 'insertion-sort', type: 'move-key-up', key: key }) :\n                dispatch({ algorithm: 'insertion-sort', type: 'move-key-out', key: key });\n        }\n        else {\n            (state.numberBoxes[key].isOut) ? \n                dispatch({ algorithm: 'insertion-sort', type: 'move-key-in', key: key }) :\n                dispatch({ algorithm: 'insertion-sort', type: 'set-state' });\n        }\n    }\n\n    function stepBubbleSort() {\n        let [i, , swapped] = state.stack;\n        if (state.numbers[i] > state.numbers[i + 1]) {\n            swap(i, i + 1);\n            // A pass has completed in which swaps have occured, reset for next pass\n            if (i + 1 === state.numbers.length - 1 && swapped === 1) {\n                dispatch({ algorithm: 'bubble-sort', type: 'reset' })\n                return;\n            }\n            // Increment counter and set swapped\n            dispatch({ algorithm: 'bubble-sort', type: 'set-swapped' })\n            return;\n        }\n        else { // TODO: Check if we can remove this else and get rid of duplicate code\n            // A pass has completed in which swaps have occured, reset for next pass\n            if (i + 1 === state.numbers.length - 1 && swapped === 1) {\n                dispatch({ algorithm: 'bubble-sort', type: 'reset' })\n                return;\n            }\n        }\n        // The pass has completed in which no swaps have occured, done!\n        if (i + 1 === state.numbers.length && swapped === 0) {\n            dispatch({ type: 'finish' });\n            dispatch({ type: 'toggle-run' });\n            return;\n        }\n        // Increment counter for next comparion\n        dispatch({ algorithm: 'bubble-sort', type: 'inc-counter' })\n    }\n\n    function stepMergeSort() {\n        let next = state.stack[state.stack.length - 1];\n        let instruction = next.instructions[0];\n        let l = next.scope[0];\n        let r = next.scope[1];\n        let mid = Math.floor((l + r) / 2);\n\n        if (instruction === 'return') {\n            // Termination condition: last elements returns\n            if (state.stack.length === 1) {\n                dispatch({ type: 'toggle-run' });\n                return;\n            }\n            // return\n            dispatch({ type: 'recursive-return' });\n            return;\n        }\n\n        // Single element\n        if (l === r) {\n            next.instructions.splice(0, 3); // Skip to return instruction\n            return;\n        }\n\n        if (instruction === 'recurse-l') {\n            dispatch({ algorithm: 'merge-sort', type: 'recurse-l', left: l, mid: mid });\n        } else if (instruction === 'recurse-r') {\n            dispatch({ algorithm: 'merge-sort', type: 'recurse-r', mid: mid, right: r });\n        } else if (instruction === 'merge') {\n            dispatch({ algorithm: 'merge-sort', type: 'merge', left: l, mid: mid, right: r })\n        }\n    }\n\n    function stepQuickSort() {\n        let next = state.stack[state.stack.length - 1];\n        let instruction = next.instructions[0];\n        let l = next.scope[0];\n        let r = next.scope[1];\n        let p = next.p;\n\n        if (instruction === 'return') {\n            if (state.stack.length === 1) {\n                dispatch({ type: 'toggle-run' });\n                return;\n            }\n            dispatch({ type: 'recursive-return' });\n            return;\n        }\n        // Base case, single element\n        if (l >= r) {\n            next.instructions.splice(0, 3); // Skip to return instruction\n            return;\n        }\n\n        if (instruction === 'partition') {\n            dispatch({ algorithm: 'quick-sort', type: \"partition\", left: l, right: r });\n        }\n        else if (instruction === 'recurse-l') {\n            dispatch({ algorithm: 'quick-sort', type: 'recurse-l', left: l, p: p });\n        } else if (instruction === 'recurse-r') {\n            dispatch({ algorithm: 'quick-sort', type: 'recurse-r', right: r, p: p });\n        }\n    }\n\n    function swap(a, b) {\n        dispatch({ type: 'swap', a, b });\n    }\n\n    return (\n        <div className='sorting-visualizer'>\n            <TopNav />\n            <div className=\"main-app\">\n                <SideNav onRandom={handleRandom} onReset={handleReset} onStep={handleStep} onRun={handleRun} />\n                <DisplayBox />\n            </div>\n        </div>\n    );\n};\n\nexport default SortingVisualizer","import React from 'react'\nimport { StateContextProvider} from './Context'\n\nimport './App.css' \nimport SortingVisualizer from './components/SortingVisualizer'\n\nconst App = () => {\n    return (\n        <StateContextProvider>\n            <SortingVisualizer /> \n        </StateContextProvider> \n    );\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}